generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  email String @unique @db.VarChar(255)
  dateOfBirth DateTime @db.Date
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emailVerifyToken String @default("")
  forgotPasswordToken String @default("")
  verify UserVerifyStatus @default(UNVERIFIED)
  bio String @db.VarChar(100) @default("")
  location String @default("")
  website String @default("")
  username String @unique @default(dbgenerated("gen_random_uuid()"))
  avatar String @default("")
  coverPhoto String @default("")

  refreshTokens RefreshToken[] 
  followers Follower[] @relation("FollowerUser")
  following Follower[] @relation("UserFollower")
  mentionedIn Tweet[] @relation("TweetMentions")
  bookmarks BookMark[]
  likes Like[]
  tweets Tweet[]

  @@index(email)
  @@index(id)
  @@index(username)
  @@unique(id)
}

model RefreshToken {
  id Int @id @default(autoincrement())
  userId Int
  token String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  expiresAt DateTime

  @@index(userId)
  @@index(token)
  @@index(id)
  @@unique([userId, token])
  @@unique([token])
  @@index([userId, token])
  @@index(expiresAt)
}

model Follower {
  id Int @id @default(autoincrement())
  userId Int
  followedUserId Int
  createdAt DateTime @default(now())
  user User @relation("UserFollower", fields: [userId], references: [id])
  follower User @relation("FollowerUser", fields: [followedUserId], references: [id])

  @@index(userId)
  @@index(followedUserId)
  @@unique([userId, followedUserId])
  @@index([userId, followedUserId])
}

model BookMark {
  id Int @id @default(autoincrement())
  userId Int
  tweetId Int
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  tweet Tweet @relation(fields: [tweetId], references: [id])

  @@unique([userId, tweetId])
  @@index([userId, tweetId])
  @@index(id)
}

model Like {
  id Int @id @default(autoincrement())
  userId Int
  tweetId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  tweet Tweet @relation(fields: [tweetId], references: [id])
  @@unique([userId, tweetId])
  @@index([userId, tweetId])
  @@index(id)
}

model Tweet {
  id Int @id @default(autoincrement())
  userId Int
  audience TweetAudience @default(EVERYONE)
  parentId Int?
  type TweetType @default(TWEET)
  guest_view Int @default(0)
  user_view Int @default(0)
  content String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  likes Like[]
  bookmarks BookMark[]
  hashtags Hashtag[] 
  medias Media[]
  mentions User[] @relation("TweetMentions")

  @@index(id)
  @@index(userId)
  @@index(parentId)
  @@index(audience)
  @@index(type)
}

model Hashtag {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  tweets Tweet[]
  createdAt DateTime @default(now())

  @@index(name)
  @@index(id)
}

model Media {
  id Int @id @default(autoincrement())
  url String @db.VarChar(255)
  type MediaType @default(IMAGE)
  tweetId Int
  tweet Tweet @relation(fields: [tweetId], references: [id])

  @@index(id)
  @@index(type)
}

model VideoStatusEncode {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  status VideoStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(id)
  @@index(name)
}

enum UserVerifyStatus {
  UNVERIFIED  
  VERIFIED
  BANNED
}

enum TweetAudience {
  EVERYONE
  TWITTER_CIRCLE
}

enum TweetType {
  TWEET
  RETWEET
  COMMENT
  QUOTE_TWEET
}

enum MediaType {
  IMAGE
  VIDEO
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}